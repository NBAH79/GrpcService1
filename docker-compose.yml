version: '3.4'

services:
  postgres:
    container_name: postgres_container
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 11223344
      PGDATA: /data/postgres
    volumes:
       - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - postgres
    restart: unless-stopped
  
  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: xxx@yyy.zzz  
      PGADMIN_DEFAULT_PASSWORD: pgadmin11223344
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - postgres
      - front
    restart: unless-stopped  


  grpcservice1:
    image: ${DOCKER_REGISTRY-}grpcservice1
    build:
      context: .
      dockerfile: GrpcService1/Dockerfile
    depends_on:
      - postgres
    networks:
      - postgres
      - front

  mongo1:
    image: mongo:4
    container_name: "mongo1"
    environment:
          - MONGO_DATA_DIR=/data/db
          - MONGO_LOG_DIR=/dev/null
    restart: unless-stopped
    networks:
      - mongo
    ports: 
      - 27017:27017
    volumes:
      - ./docker_volume/mongo1:/data/db:rw
    # command: --nojournal
    entrypoint: ["mongod", "--replSet", "myReplicaSet", "--bind_ip", "localhost,mongo1"]
  mongo2:
    image: mongo:4
    container_name: "mongo2"
    environment:
          - MONGO_DATA_DIR=/data/db
          - MONGO_LOG_DIR=/dev/null
    restart: unless-stopped
    networks:
      - mongo
    ports: 
      - 27018:27017
    volumes:
      - ./docker_volume/mongo2:/data/db:rw
    # command: --nojournal
    entrypoint: ["mongod", "--replSet", "myReplicaSet", "--bind_ip", "localhost,mongo2"]

  mongosetup:
    image: mongo:6
    depends_on:
      - mongo1
      - mongo2
    networks:
      - mongo
    volumes:
      - ./docker_volume/scripts:/scripts
    restart: "no"
    entrypoint: [ "bash", "/scripts/mongo_setup.sh"]

  grpcservice2:
    image: ${DOCKER_REGISTRY-}grpcservice2
    build:
      context: .
      dockerfile: GrpcService2/Dockerfile
    depends_on:
      - mongosetup
    networks:
      - mongo  
      - front
    # environment:
    #   - MONGO_URL=mongodb://mongo:27017 

  # envoy:
  #   image: envoyproxy/envoy:dev-7b7ab06de635f830529cc54a807073a2db2c4c38
  #   ports:
  #     - 10000:10000
  #     - 9901:9901
  #   volumes:
  #     - ./Envoy/envoy.yaml:/etc/envoy/envoy.yaml
  #   build:
  #      context: .
  #      dockerfile: Envoy/Dockerfile

  mongo-express:
   image: mongo-express
   restart: always
   ports:
     - 8081:8081
   environment:
     - ME_CONFIG_MONGODB_SERVER=mongo1
     - ME_CONFIG_MONGODB_PORT=27017
#      - ME_CONFIG_MONGODB_ADMINUSERNAME=origami
#      - ME_CONFIG_MONGODB_ADMINPASSWORD=1wSx7o5PZEH6EomzpIsR
     - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
#      - ME_CONFIG_MONGODB_AUTH_DATABASE=databasename
#      - ME_CONFIG_MONGODB_AUTH_USERNAME=${MONGO_ROOT_USER}
#      - ME_CONFIG_MONGODB_AUTH_PASSWORD=${MONGO_ROOT_PASSWORD}
     - ME_CONFIG_BASICAUTH_USERNAME=rmuser
     - ME_CONFIG_BASICAUTH_PASSWORD=rmpassword
#      - ME_CONFIG_SITE_SSL_ENABLED=false
#      - ME_CONFIG_SITE_SSL_CRT_PATH=
#      - ME_CONFIG_SITE_SSL_KEY_PATH=
   networks:
     - mongo
     - front
   depends_on:
     - mongo1
   volumes:
#      - ./docker_volume/express:/data/db:rw
     - ~/.aspnet/https:/https:ro

networks:
  postgres:
    driver: bridge
    internal: true
  mongo:
    driver: bridge
    internal: true
  front:
    driver: bridge
volumes:
  postgres:
  pgadmin:
  mongo:  